// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kbence/conndetect/internal/connlib (interfaces: ConnectionSource)

// Package connlib_mock is a generated GoMock package.
package connlib_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	connlib "github.com/kbence/conndetect/internal/connlib"
)

// MockConnectionSource is a mock of ConnectionSource interface.
type MockConnectionSource struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionSourceMockRecorder
}

// MockConnectionSourceMockRecorder is the mock recorder for MockConnectionSource.
type MockConnectionSourceMockRecorder struct {
	mock *MockConnectionSource
}

// NewMockConnectionSource creates a new mock instance.
func NewMockConnectionSource(ctrl *gomock.Controller) *MockConnectionSource {
	mock := &MockConnectionSource{ctrl: ctrl}
	mock.recorder = &MockConnectionSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionSource) EXPECT() *MockConnectionSourceMockRecorder {
	return m.recorder
}

// ReadEstablishedTCPConnections mocks base method.
func (m *MockConnectionSource) ReadEstablishedTCPConnections(arg0 string) (*connlib.CategorizedConnections, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEstablishedTCPConnections", arg0)
	ret0, _ := ret[0].(*connlib.CategorizedConnections)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEstablishedTCPConnections indicates an expected call of ReadEstablishedTCPConnections.
func (mr *MockConnectionSourceMockRecorder) ReadEstablishedTCPConnections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEstablishedTCPConnections", reflect.TypeOf((*MockConnectionSource)(nil).ReadEstablishedTCPConnections), arg0)
}
