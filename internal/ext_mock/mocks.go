// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gookit/event (interfaces: ManagerFace)

// Package ext_mock is a generated GoMock package.
package ext_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	event "github.com/gookit/event"
)

// MockManagerFace is a mock of ManagerFace interface.
type MockManagerFace struct {
	ctrl     *gomock.Controller
	recorder *MockManagerFaceMockRecorder
}

// MockManagerFaceMockRecorder is the mock recorder for MockManagerFace.
type MockManagerFaceMockRecorder struct {
	mock *MockManagerFace
}

// NewMockManagerFace creates a new mock instance.
func NewMockManagerFace(ctrl *gomock.Controller) *MockManagerFace {
	mock := &MockManagerFace{ctrl: ctrl}
	mock.recorder = &MockManagerFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagerFace) EXPECT() *MockManagerFaceMockRecorder {
	return m.recorder
}

// AddEvent mocks base method.
func (m *MockManagerFace) AddEvent(arg0 event.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEvent", arg0)
}

// AddEvent indicates an expected call of AddEvent.
func (mr *MockManagerFaceMockRecorder) AddEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockManagerFace)(nil).AddEvent), arg0)
}

// Fire mocks base method.
func (m *MockManagerFace) Fire(arg0 string, arg1 event.M) (error, event.Event) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fire", arg0, arg1)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(event.Event)
	return ret0, ret1
}

// Fire indicates an expected call of Fire.
func (mr *MockManagerFaceMockRecorder) Fire(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fire", reflect.TypeOf((*MockManagerFace)(nil).Fire), arg0, arg1)
}

// On mocks base method.
func (m *MockManagerFace) On(arg0 string, arg1 event.Listener, arg2 ...int) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "On", varargs...)
}

// On indicates an expected call of On.
func (mr *MockManagerFaceMockRecorder) On(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "On", reflect.TypeOf((*MockManagerFace)(nil).On), varargs...)
}
